// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CdmServiceClient is the client API for CdmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CdmServiceClient interface {
	// StartLocalDevice starts a Compute Device on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the cdm/config.yaml
	//   3. all bytes constituting the Device YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalDevice(ctx context.Context, opts ...grpc.CallOption) (CdmService_StartLocalDeviceClient, error)
	// StartFromPreviousDevice starts a new Compute Device based on a previous one.
	// If the previous Compute Device does not have the can-replay condition set this call will result in an error.
	StartFromPreviousDevice(ctx context.Context, in *StartFromPreviousDeviceRequest, opts ...grpc.CallOption) (*StartDeviceResponse, error)
	// StartDeviceRequest starts a new Compute Device based on its specification.
	StartDevice(ctx context.Context, in *StartDeviceRequest, opts ...grpc.CallOption) (*StartDeviceResponse, error)
	// Searches for Compute Device(s) known to this instance
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	// Subscribe listens to new Compute Device(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (CdmService_SubscribeClient, error)
	// GetDevice retrieves details of a single Compute Device
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	// Listen listens to Compute Device updates and log output of a running Compute Device
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (CdmService_ListenClient, error)
	// StopDevice stops a currently running Compute Device
	StopDevice(ctx context.Context, in *StopDeviceRequest, opts ...grpc.CallOption) (*StopDeviceResponse, error)
}

type cdmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCdmServiceClient(cc grpc.ClientConnInterface) CdmServiceClient {
	return &cdmServiceClient{cc}
}

func (c *cdmServiceClient) StartLocalDevice(ctx context.Context, opts ...grpc.CallOption) (CdmService_StartLocalDeviceClient, error) {
	stream, err := c.cc.NewStream(ctx, &CdmService_ServiceDesc.Streams[0], "/v1.CdmService/StartLocalDevice", opts...)
	if err != nil {
		return nil, err
	}
	x := &cdmServiceStartLocalDeviceClient{stream}
	return x, nil
}

type CdmService_StartLocalDeviceClient interface {
	Send(*StartLocalDeviceRequest) error
	CloseAndRecv() (*StartDeviceResponse, error)
	grpc.ClientStream
}

type cdmServiceStartLocalDeviceClient struct {
	grpc.ClientStream
}

func (x *cdmServiceStartLocalDeviceClient) Send(m *StartLocalDeviceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cdmServiceStartLocalDeviceClient) CloseAndRecv() (*StartDeviceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartDeviceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cdmServiceClient) StartFromPreviousDevice(ctx context.Context, in *StartFromPreviousDeviceRequest, opts ...grpc.CallOption) (*StartDeviceResponse, error) {
	out := new(StartDeviceResponse)
	err := c.cc.Invoke(ctx, "/v1.CdmService/StartFromPreviousDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cdmServiceClient) StartDevice(ctx context.Context, in *StartDeviceRequest, opts ...grpc.CallOption) (*StartDeviceResponse, error) {
	out := new(StartDeviceResponse)
	err := c.cc.Invoke(ctx, "/v1.CdmService/StartDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cdmServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/v1.CdmService/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cdmServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (CdmService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CdmService_ServiceDesc.Streams[1], "/v1.CdmService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &cdmServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CdmService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type cdmServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *cdmServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cdmServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := c.cc.Invoke(ctx, "/v1.CdmService/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cdmServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (CdmService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &CdmService_ServiceDesc.Streams[2], "/v1.CdmService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &cdmServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CdmService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type cdmServiceListenClient struct {
	grpc.ClientStream
}

func (x *cdmServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cdmServiceClient) StopDevice(ctx context.Context, in *StopDeviceRequest, opts ...grpc.CallOption) (*StopDeviceResponse, error) {
	out := new(StopDeviceResponse)
	err := c.cc.Invoke(ctx, "/v1.CdmService/StopDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CdmServiceServer is the server API for CdmService service.
// All implementations must embed UnimplementedCdmServiceServer
// for forward compatibility
type CdmServiceServer interface {
	// StartLocalDevice starts a Compute Device on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the cdm/config.yaml
	//   3. all bytes constituting the Device YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalDevice(CdmService_StartLocalDeviceServer) error
	// StartFromPreviousDevice starts a new Compute Device based on a previous one.
	// If the previous Compute Device does not have the can-replay condition set this call will result in an error.
	StartFromPreviousDevice(context.Context, *StartFromPreviousDeviceRequest) (*StartDeviceResponse, error)
	// StartDeviceRequest starts a new Compute Device based on its specification.
	StartDevice(context.Context, *StartDeviceRequest) (*StartDeviceResponse, error)
	// Searches for Compute Device(s) known to this instance
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	// Subscribe listens to new Compute Device(s) updates
	Subscribe(*SubscribeRequest, CdmService_SubscribeServer) error
	// GetDevice retrieves details of a single Compute Device
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error)
	// Listen listens to Compute Device updates and log output of a running Compute Device
	Listen(*ListenRequest, CdmService_ListenServer) error
	// StopDevice stops a currently running Compute Device
	StopDevice(context.Context, *StopDeviceRequest) (*StopDeviceResponse, error)
	mustEmbedUnimplementedCdmServiceServer()
}

// UnimplementedCdmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCdmServiceServer struct {
}

func (UnimplementedCdmServiceServer) StartLocalDevice(CdmService_StartLocalDeviceServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalDevice not implemented")
}
func (UnimplementedCdmServiceServer) StartFromPreviousDevice(context.Context, *StartFromPreviousDeviceRequest) (*StartDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousDevice not implemented")
}
func (UnimplementedCdmServiceServer) StartDevice(context.Context, *StartDeviceRequest) (*StartDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDevice not implemented")
}
func (UnimplementedCdmServiceServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedCdmServiceServer) Subscribe(*SubscribeRequest, CdmService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedCdmServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedCdmServiceServer) Listen(*ListenRequest, CdmService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedCdmServiceServer) StopDevice(context.Context, *StopDeviceRequest) (*StopDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDevice not implemented")
}
func (UnimplementedCdmServiceServer) mustEmbedUnimplementedCdmServiceServer() {}

// UnsafeCdmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CdmServiceServer will
// result in compilation errors.
type UnsafeCdmServiceServer interface {
	mustEmbedUnimplementedCdmServiceServer()
}

func RegisterCdmServiceServer(s grpc.ServiceRegistrar, srv CdmServiceServer) {
	s.RegisterService(&CdmService_ServiceDesc, srv)
}

func _CdmService_StartLocalDevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CdmServiceServer).StartLocalDevice(&cdmServiceStartLocalDeviceServer{stream})
}

type CdmService_StartLocalDeviceServer interface {
	SendAndClose(*StartDeviceResponse) error
	Recv() (*StartLocalDeviceRequest, error)
	grpc.ServerStream
}

type cdmServiceStartLocalDeviceServer struct {
	grpc.ServerStream
}

func (x *cdmServiceStartLocalDeviceServer) SendAndClose(m *StartDeviceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cdmServiceStartLocalDeviceServer) Recv() (*StartLocalDeviceRequest, error) {
	m := new(StartLocalDeviceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CdmService_StartFromPreviousDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CdmServiceServer).StartFromPreviousDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CdmService/StartFromPreviousDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CdmServiceServer).StartFromPreviousDevice(ctx, req.(*StartFromPreviousDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CdmService_StartDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CdmServiceServer).StartDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CdmService/StartDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CdmServiceServer).StartDevice(ctx, req.(*StartDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CdmService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CdmServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CdmService/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CdmServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CdmService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CdmServiceServer).Subscribe(m, &cdmServiceSubscribeServer{stream})
}

type CdmService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type cdmServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *cdmServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CdmService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CdmServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CdmService/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CdmServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CdmService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CdmServiceServer).Listen(m, &cdmServiceListenServer{stream})
}

type CdmService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type cdmServiceListenServer struct {
	grpc.ServerStream
}

func (x *cdmServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CdmService_StopDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CdmServiceServer).StopDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CdmService/StopDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CdmServiceServer).StopDevice(ctx, req.(*StopDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CdmService_ServiceDesc is the grpc.ServiceDesc for CdmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CdmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CdmService",
	HandlerType: (*CdmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousDevice",
			Handler:    _CdmService_StartFromPreviousDevice_Handler,
		},
		{
			MethodName: "StartDevice",
			Handler:    _CdmService_StartDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _CdmService_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _CdmService_GetDevice_Handler,
		},
		{
			MethodName: "StopDevice",
			Handler:    _CdmService_StopDevice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalDevice",
			Handler:       _CdmService_StartLocalDevice_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _CdmService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _CdmService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cdm.proto",
}
